using System; //Laberyntia
class Program
{
  private int turnos = 1;
  public static int TURNOS
  {get{return turnos;} set{turnos = value};}
    static void Main()
    {
        Console.WriteLine("Bienvenidos al mundo de Laberinthya, un juego de laberinto tipo multijugador");
        Inicializar();
        
    }

    static void Inicializar()
    {
      Console.WriteLine("Elije una opción. 1(Iniciar Partida) 2(Ver tablero) 3(Ver Reglas) 4(Salir)");

      int opcion_inicial = Validar_int();
      opcion_inicial = While_int(opcion_inicial, 1, 4);

      if (opcion_inicial == 1)
      {
        int i = 0;
        int j = 0;
        Random random = new Random();
        int fil = random.Next(1, 31);
        int col = random.Next(1, 153);

        Player [] players = Crear_Jugadores(players);
        Board campo = new Board();

        for(i = 0; i < players.Length; i++)
        {
          while (campo[fil][col] != ".")
          {
            fil = random.Next(1, 31);
            col = random.Next(1, 153);
          }
          campo[fil][col] = players[i].LETRA;
          players[i].FIL = fil;
          players[i].COL = col;
        }

        while()
        {
          for( i = 0; i < players.Length; i++)
          { 
            int movimientos == players[i].VELOCIDAD;
            Console.WriteLine($"Es el turno de {players[i].NOMBRE}");

            while( movimientos > 0)
            {
              char accion = Validar_char();
              while(accion != 'w'|| accion != 's'|| accion != 'a'|| accion != 'd'|| accion != 'e'|| accion != 'q')
              {accion = Validar_char;}

              if(accion == 'e')
              {campo = Actions.Usar_Habilidades(players[i], campo,); movimientos = 1;}
              else if(accion == 'q')
              {movimientos = Actions.Ver_Habilidades(movimientos);}
              else
              {campo = Actions.Caminar(players[i], campo, accion);}

              Mostrar_Tablero(campo.TABLERO);
              movimientos--;
              Console.WriteLine($"Te quedan {movimientos} movimientos"); 
            }
          }
          Program.TURNOS++; 

         for(i = 0; i < players.Length; i++)
         {
          if(players[i].LLAVES >= 3)
          {
            Console.WriteLine("");
            Console.WriteLine($"{players[i].NOMBRE} ha ganado, hasta la proxima partida.");
            break;
          }
         }
        }
      }

      else if (opcion_inicial == 2)
      {
        Board tablero = new Board();
        Console.WriteLine("¿Desea hacer algo más?");
        Inicializar();
      }
      else if (opcion_inicial == 3)
      {
        Console.WriteLine("El objetivo del juego es conseguir 3 de las 5 llaves dispersas por el mapa antes de que tu rival lo haga");
        Console.WriteLine("El jugador 1 juega con la letra (x), el 2 con la (o) y el 3, si existe, con la (z)");
        Console.WriteLine("Los lugares del mapa marcados con (#) se consideran muros y no pueden traspasarse o destruirse");
        Console.WriteLine("Los lugares del mapa marcados con (@) se consideran cofres o trampas, tendrás que arriesgarte para descubrirlo");

        Console.WriteLine("");
        Inicializar();
      }
      else
      {
        Console.WriteLine("Hasta la próxima partida");
      }
    }

     static Player [] Crear_Jugadores(Player [] entrada)
    {
        int opcion = 0;
        do
        {
            Console.WriteLine("Bien, empecemos.");
            Console.WriteLine("");
            Console.WriteLine("Lo primero que debemos hacer es escribir la cantidad de jugadores que nos acompañan (2-3)");
            int jugadores = Validar_int();
            jugadores = While_int(jugadores, 2, 3)

            Console.WriteLine("");
            Console.WriteLine($"Muy bien, serán {jugadores} jugadores entonces. Ahora vamos a personalizar a cada jugador");
            Player [] players = new Player [jugadores];

            for (int i = 0; i < jugadores; i++)
            {
              Console.WriteLine("");
              Console.WriteLine($"Jugador {i + 1}:");
              players[i] = new Player();

              if (i == 0)
              {players[i].LETRA = "x";}
              else if (i == 1)
              {players[i].LETRA = "o";}
              else if (i == 2)
              {players[i].LETRA = "z"};


              Console.WriteLine("");
              Console.WriteLine($"Los datos del jugador {i + 1} son los siguientes:");
              players[i].Info();
            }

            entrada = players;
            
            Console.WriteLine("");
            Console.WriteLine("Todo listo, presiona 1(Comenzar) o 2(Volver al inicio)");
            opcion = Validar_int();
            opcion = While_int(opcion, 1, 2);

        } while(opcion == 2);

      return entrada;
    }

    public static int While_int(int entrada, int min, int max)
    {
      while(entrada < min || entrada > max)
      {
        Console.WriteLine("Numero incorrecto. Intenta otra vez");
        entrada = Validar_int();
      }
      return entrada;
    }
    public static int Validar_int()
    {
      int i = 0;
      try 
      {
        i = int.Parse(Console.ReadLine());
      }
      catch(Exception ex)
      {
        Console.WriteLine("La opción elegida debe ser un numero entero. Intenta otra vez");
        return Validar_int();
      }
      return i;
    }
    public static string Validar_string()
    {
        int j = 0;
        string i = Console.ReadLine();
        try
        {
          j = int.Parse(i);
        }
        catch(Exception ex)
        { 
          return i;
        }
        Console.WriteLine("La opción elegida debe ser una cadena de caracteres o un caracter. Intenta otra vez");
        return Validar_string();
    }
    public static string Validar_char()
    {
      char j = 'q'
        try
        {
          char j = Console.ReadLine();
        }
        catch(Exception ex)
        {
        Console.WriteLine("La opción elegida debe ser un caracter. Intenta otra vez");
          return Validar_char();
        }
        
        return j;
    }
  static void Mostrar_Tablero(string [][] entrada)
  {
    int fil = 0;
    int col = 0;

    for(fil = 0; fil < 30; fil++)
    {
      for(col = 0; col < 152; col++)
      {
        Console.Write(entrada[fil][col]);
      }
      Console.WriteLine("");
    }
  }
}

class Player
{
    // Atributos
    private string nombre;
    private string empleo;
    private int velocidad;
    private string habilidad_1;
    private string habilidad_2;
    private string habilidad_Especial;
    private string letra;
    private int fil;
    private int col;
    private int llaves;

    //Propiedades
        public string NOMBRE {get {return nombre;} set {nombre = value;}}
        public string EMPLEO
    {
        get {return empleo;}
        set {empleo = value;}
    }
        public int VELOCIDAD
    {
        get {return velocidad;}
        set {velocidad = value;}
    }
        public string HABILIDAD_1
    {
        get {return habilidad_1;}
        set {habilidad_1 = value;}
    }
        public string HABILIDAD_2
    {
        get {return habilidad_2;}
        set {habilidad_2 = value;}
    }
        public string HABILIDAD_ESPECIAL
    {
        get {return habilidad_Especial;}
        set {habilidad_Especial = value;}
    }
        public string LETRA
    {
        get {return letra;}
        set {letra = value;}
    }
    public int FIL
    {
      get {return fil}
      set {fil = value}
    }
    public int COL
    {
      get {return col}
      set {col = value}
    }    
        public int LLAVES
    {
        get {return llaves;}
        set {llaves = value;}
    }
    
    // Constructor
    public Player()
    {
        Dar_nombre();
        Dar_empleo();
        Dar_habilidades();
    }  

    //Metodos

   public void Dar_nombre()
   {
    Console.WriteLine("Escribe el nombre de este jugador");
    Console.WriteLine("");
    nombre = Program.Validar_string();
   }
   public void Dar_empleo( )
   {
       Console.WriteLine("Ahora elija su empleo");
       Console.WriteLine("");
       Console.WriteLine("1 Explorador (velocidad 3)");
       Console.WriteLine("Habilidad especial (Manitas): Convierte una trampa o un cofre en bonificaciones (Enfriamiento 2 turnos)"); 

       Console.WriteLine("2 Buscatesoros (velocidad 4)"); 
       Console.WriteLine("Habilidad especial (Robo): Roba 2 de velocidad a un jugador cercano por 1 turno (Enfriamiento 10 turnos)");

       Console.WriteLine("3 Minero (velocidad 3)");
       Console.WriteLine("Habilidad especial (Derrumbe): Destruye maximo 2 trampas que esten cerca y aleja dos casillas a los jugadores cercanos (Enfriamiento 10 turnos)");

       Console.WriteLine("4 ()");
       Console.WriteLine("Habilidad especial()");

       Console.WriteLine("5 ()");
       Console.WriteLine("Habilidad especial()");
       Console.WriteLine("");
       Console.WriteLine("Empleo:");

       int opcion = Program.Validar_int();
       opcion = Program.While_int(opcion, 1, 5)

       switch (opcion)
       {
            case 1:
                empleo = "Explorador";
                velocidad = 3;
                habilidad_Especial = "Manitas"; 
                break;
            case 2:
                empleo = "Buscatesoros";
                velocidad = 4;
                habilidad_Especial = "Robo"; 
                break;
            case 3:
                empleo = "Minero";
                velocidad = 3;
                habilidad_Especial = "Derrumbe";
                break;
            case 4:
                empleo = "";
                velocidad = 3;
                habilidad_Especial = "Manitas"; 
                break;
            case 5:
                empleo = "";
                velocidad = 3;
                habilidad_Especial = "Manitas"; 
            break;                
       }
   }

   public void Dar_habilidades()
   {
     //Habilidades
      Console.WriteLine ("Por ultimo, elige dos habilidades distintas de entre las siguientes ");
      Console.WriteLine("");
      Console.WriteLine ("1 Carrera (Aumenta tu velocidad en 2 este turno)(Enfriamiento 4 turnos)");
      Console.WriteLine ("2 Descanso (Restaura el Enfriamiento de tu otra habilidad)(Enfriamiento 8 turnos)");
      Console.WriteLine ("3 Salto (Te trasladas 2 casillas sin importar si hay trampas)(Enfriamiento 3 turnos)");
      Console.WriteLine ("4 Empuje (Alejas a un jugador cercarno una casilla)(Enfriamiento 3 turnos)");
      Console.WriteLine("");

        int opcion1 = Program.Validar_int();
        int opcion2 = Program.Validar_int();

        while (opcion1 < 1|| opcion1 > 4|| opcion2 < 1|| opcion2 > 4 || opcion1 == opcion2)
        {
            Console.WriteLine("Habilidades incorrectas, elige nuevamente");

            opcion1 = Program.Validar_int();
            opcion2 = Program.Validar_int();
        }

        switch (opcion1)
        {
            case 1:
            habilidad_1 = "Carrera";
            break;

            case 2:
            habilidad_1 = "Descanso";
            break;

            case 3:
            habilidad_1 = "Salto";
            break;

            case 4:
            habilidad_1 = "Empuje";
            break;
        }
        switch (opcion2)
        {
            case 1:
            habilidad_2 = "Carrera";
            break;

            case 2:
            habilidad_2 = "Descanso";
            break;

            case 3:
            habilidad_2 = "Salto";
            break;

            case 4:
            habilidad_2 = "Empuje";
            break;
        }
    }

   public void Info()
   {
    Console.WriteLine($"Nombre: {NOMBRE}");
    Console.WriteLine($"Empleo: {EMPLEO}");
    Console.WriteLine($"Velocidad: {VELOCIDAD.ToString()}");
    Console.WriteLine($"Habilidad 1: {HABILIDAD_1}");
    Console.WriteLine($"Habilidad 2: {HABILIDAD_2}");
    Console.WriteLine($"Habilidad Especial: {HABILIDAD_ESPECIAL}");
    Console.WriteLine($"Letra: {LETRA}");
   } 
}

class Board
{
  private string [][] tablero;

  public string TABLERO
  {get {return tablero;} set{tablero = value;}}

  public Board()
  {
    tablero = new string [30][];
    for (int i = 0; i < 30; i++)
    {
      tablero[i] = new string [152];
    }

    tablero = Inicializar_Tablero(tablero);
  }

  public string [][] Inicializar_Tablero(string [][] entrada)
  {
    int fil = 0;
    int col = 0;

    //Muros exteriores
    for( fil = 0; fil < 30; fil++)
    {
      for( col = 0; col < 152; col++)
      {
        entrada[0][col] = "#";
        entrada[29][col] = "#";

        entrada[fil][0] = "#";
        entrada[fil][151] = "#";
      }
    }

    //Muros interiores
    for ( fil = 0; fil < 30; fil++)
    {
      entrada[fil][75] = "#";
      entrada[fil][37] = "#";
      entrada[fil][113]= "#";
    }  
    for( col = 0; col < 152; col ++)
    {
      entrada[14][col] = "#";
    }
    
    //Puertas verticales
    Random random = new Random();
    int posibilidad = random.Next(1, 10);
    
    for(fil = 1; fil < 29; fil ++)
    {
      for (col = 1; col < 151; col ++)
      {
        if( entrada [fil][col] == "#" && posibilidad == 7)
        {
          entrada[fil][col] = ".";
        }
        random = new Random();
        posibilidad = random.Next(1,10);
      }
    } 

    //Puertas horizontales
    entrada = Fila_14(entrada); 

    //Caminos 
    for(fil = 0; fil < 30; fil++)
    {
      for(col = 0; col < 152; col++)
      {
        if(entrada[fil][col] != "#")
        {
          entrada[fil][col] = ".";
        }
      }
    }  

    //Constantes
    entrada[14][37] = "#";
    entrada[14][75] = "#";
    entrada[14][113]= "#";

    entrada[10][37] = ".";
    entrada[11][75] = ".";
    entrada[12][113] =".";

    entrada[25][37] = ".";
    entrada[24][75] = ".";
    entrada[28][113] =".";

    return entrada;
  }

  public string [][] Fila_14(string [][] entrada_es)
  {
    Random dado = new Random();
    int cortes = dado.Next(1, 4);
    int puertas = dado.Next(2, 6);
    int i = 0;
    int j = 0;

    for (i = 1; i < 37; i++)
    {
      j = 1;
      entrada_es [14][i] = Cortes(cortes, puertas, i, j);
      puertas = dado.Next(2, 6);
    }

    dado = new Random(); 
    cortes = dado.Next(1, 4);
    puertas = dado.Next(2, 6);
    for (i = 37; i < 75; i++)
    {
      j = 37;
      entrada_es [14][i] = Cortes(cortes, puertas, i, j);
    }

    dado = new Random(); 
    cortes = dado.Next( 1, 4);
    puertas = dado.Next(2, 6);
    for (i = 75; i < 113; i++)
    {
      j = 75;
      entrada_es [14][i] = Cortes(cortes, puertas, i, j);
    }

    dado = new Random(); 
    cortes = dado.Next(1, 4);
    for (i = 113; i < 151; i++)
    {
      j = 113;
      entrada_es [14][i] = Cortes(cortes, puertas, i, j);
      puertas = dado.Next(2, 6);
    }


    return entrada_es;
  }

  public string Cortes(int cortes_es, int puertas_es, int i_es, int j_es)
  {

    if(cortes_es == 1 && i_es > j_es + 14 && i_es <= j_es + 14 + puertas_es)
    {
      return ".";
    }

    else if(cortes_es == 2 && i_es > j_es + 3 && i_es <= j_es + 3 + puertas_es || i_es > j_es + 26 && i_es <= j_es + 26 + puertas_es)
    {
      return ".";
    }   

    else if(cortes_es == 3 && i_es > j_es + 3 && i_es <= j_es + 3 + puertas_es || i_es > j_es + 26 && i_es <= j_es + 26 + puertas_es || i_es > j_es + 14 && i_es <= j_es + 14 + puertas_es)
    {
      return ".";
    }
    else return "#";
  }

}

class Actions
{

  public static Board Caminar( Player jugador_es, Board tablero_es, char entrada)
  {
    int fil = jugador_es.FIL;
    int col = jugador_es.COL;

    if(entrada == 'w')
    {
      char temp = tablero_es[fil][col];
      fil--;

      if(tablero_es[fil][col] == '.')
      {tablero_es[fil++][col] = tablero_es[fil][col];
      tablero_es[fil][col] = temp}

      else if (tablero_es[fil][col] == '@')
      {tablero_es[fil++][col] = '.'; 
      tablero_es [fil][col] = temp;
      }

      else{Console.WriteLine("Ha chocado con una pared");}
    }

    if(entrada == 's')
    {
      char temp = tablero_es[fil][col];
      fil++;

      if(tablero_es[fil][col] != '#')
      {tablero_es[fil--][col] = tablero_es[fil][col];
      tablero_es[fil][col] = temp;}

      else if (tablero_es[fil][col] == '@')
      {tablero_es[fil--][col] = '.'; 
      tablero_es [fil][col] = temp;
      }

      else{Console.WriteLine("Ha chocado con una pared");}
    }

    if(entrada == 'a')
    {
      char temp = tablero_es[fil][col];
      col--;

      if(tablero_es[fil][col] != '#')
      {tablero_es[fil][col++] = tablero_es[fil][col];
      tablero_es[fil][col] = temp;}

      else if (tablero_es[fil][col] == '@')
      {tablero_es[fil][col++] = '.'; 
      tablero_es [fil][col] = temp;
      }

      else{Console.WriteLine("Ha chocado con una pared");}
    }
    if(entrada == 'd')
    {
      char temp = tablero_es[fil][col];
      col++;

      if(tablero_es[fil][col] != '#')
      {tablero_es[fil][col--] = tablero_es[fil][col];
      tablero_es[fil][col] = temp;}

      else if (tablero_es[fil][col] == '@')
      {tablero_es[fil][col--] = '.'; 
      tablero_es [fil][col] = temp;
      }

      else{Console.WriteLine("Ha chocado con una pared");}
    }        

    return tablero_es;
  }

  public static Board Usar_Habilidades(Player jugador, Board tablero)
  {
    Console.WriteLine("¿Que habilidad quieres usar?");
    Console.WriteLine($"1 ({jugador.HABILIDAD_1})  2({jugador.HABILIDAD_2}) o 3({jugador.HABILIDAD_ESPECIAL})");

    int opcion = Program.Validar_int();
    opcion = Program.While_int(opcion, 1, 3);

    if (opcion == 1)
    {tablero = Habilidades(jugador.HABILIDAD_1);}
    if (opcion == 2)
    {tablero = Habilidades(jugador.HABILIDAD_2);}
    if(opcion == 3)
    {tablero = Habilidades(jugador.HABILIDAD_ESPECIAL)};

  return tablero;
  }

  static void Habilidades(string entrada)
  {

  }
  public static int Ver_Habilidades(int entrada)
  {
    Console.WriteLine ("1 Carrera (Aumenta tu velocidad en 2 este turno)(Enfriamiento 4 turnos)");
    Console.WriteLine ("2 Descanso (Restaura el Enfriamiento de tu otra habilidad)(Enfriamiento 8 turnos)");
    Console.WriteLine ("3 Salto (Te trasladas 2 casillas sin importar si hay trampas)(Enfriamiento 3 turnos)");
    Console.WriteLine ("4 Empuje (Alejas a un jugador cercarno una casilla)(Enfriamiento 3 turnos)"); 

    return entrada++;
  } 
  static void Cofres_Y_Trampas()
  {

  }
}