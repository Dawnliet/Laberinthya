using System; //Laberyntia
class Program
{
    static void Main()
    {
        Console.WriteLine("Bienvenidos al mundo de Laberinthya, un juego de laberinto donde tu objetivo es llegar a la meta antes de que tu rival lo haga.");
        Inicializar();
    }

    static void Inicializar()
    {
        Console.WriteLine("Elije una opción. 1(Iniciar Partida) 2(Ver tablero) 3(Salir)");

        int opcion_inicial = Validar_int();
        while(opcion_inicial < 1 || opcion_inicial > 3)
        {
            Console.WriteLine("Opcion incorrecta. 1(Iniciar Partida) 2(Ver tablero) 3(Salir)");
            opcion_inicial = Validar_int();
        }
        if (opcion_inicial == 1)
        {
            Iniciar_Partida();
            Board tablero = new Board();
        }
        else if (opcion_inicial == 2)
        {
            Board tablero = new Board();
            Console.WriteLine("¿Desea hacer algo más?");
            Inicializar();
        }
        else 
        {
            Console.WriteLine("Hasta la próxima partida");
        }
    }
    static void Iniciar_Partida()
    {
        int opcion = 0;
        do
        {
            Console.WriteLine("Bien, empecemos.");
            Console.WriteLine("");
            Console.WriteLine("Lo primero que debemos hacer es escribir la cantidad de jugadores que nos acompañan (2-3)");
            int jugadores = Validar_int();

            while (jugadores < 2 || jugadores > 3)
            {
                Console.WriteLine("Cantidad incorrecta, escribe nuevamente la cantidad de jugadores (2-3)");
                jugadores = Validar_int();
            }
            Console.WriteLine("");
            Console.WriteLine($"Muy bien, serán {jugadores} jugadores entonces. Ahora vamos a personalizar a cada jugador");
            Player [] players = new Player [jugadores];

            for (int i = 0; i < jugadores; i++)
            {
                Console.WriteLine("");
                Console.WriteLine($"Jugador {i + 1}:");
                players[i] = new Player();
                Console.WriteLine("");
                Console.WriteLine($"Los datos del jugador {i + 1} son los siguientes:");
                players[i].Info();
            }
            Console.WriteLine("");
            Console.WriteLine("Todo listo, presiona 1(Comenzar) o 2(Volver al inicio)");
            opcion = Validar_int();

            while(opcion != 1 && opcion != 2)
            {
                Console.WriteLine("Opcion incorrecta. Intenta otra vez");
                Console.WriteLine("Presiona 1(Comenzar) o 2(Volver al inicio)");
                opcion = Validar_int();
            }

        } while(opcion == 2);
     
    }
    public static int Validar_int()
    {
        int i = 0;
        try 
        {
            i = int.Parse(Console.ReadLine());
        }
        catch(Exception ex)
        {
            Console.WriteLine("La opción elegida debe ser un numero entero. Intenta otra vez");
            return Validar_int();
        }
        return i;
    }
    public static string Validar_string()
    {
        int j = 0;
        string i = Console.ReadLine();
        try
        {
            j = int.Parse(i);
        }
        catch(Exception ex)
        { 
            return i;
        }
        Console.WriteLine("La opción elegida debe ser una cadena de caracteres. Intenta otra vez");
        return Validar_string();
    }
}

class Player
{
    // Atributos
    private string nombre;
    private string empleo;
    private int velocidad;
    private string habilidad_1;
    private string habilidad_2;
    private string habilidad_Especial;

    //Propiedades
        public string NOMBRE
    {
        get {return nombre;}
        set {nombre = value;}
    }
        public string EMPLEO
    {
        get {return empleo;}
        set {empleo = value;}
    }
        public int VELOCIDAD
    {
        get {return velocidad;}
        set {velocidad = value;}
    }
        public string HABILIDAD_1
    {
        get {return habilidad_1;}
        set {habilidad_1 = value;}
    }
        public string HABILIDAD_2
    {
        get {return habilidad_2;}
        set {habilidad_2 = value;}
    }
        public string HABILIDAD_ESPECIAL
    {
        get {return habilidad_Especial;}
        set {habilidad_Especial = value;}
    }
    
    // Constructor
    public Player()
    {
        Dar_nombre();
        Dar_empleo();
        Dar_habilidades();
    }  

    //Metodos

   public void Dar_nombre()
   {
    Console.WriteLine("Escribe el nombre de este jugador");
    Console.WriteLine("");
    nombre = Program.Validar_string();
   }
   public void Dar_empleo( )
   {
       Console.WriteLine("Ahora elija su empleo");
       Console.WriteLine("");
       Console.WriteLine("1 Explorador (velocidad 3)");
       Console.WriteLine("Habilidad especial (Manitas): Convierte una trampa o un cofre en bonificaciones (Enfriamiento 2 turnos)"); 

       Console.WriteLine("2 Buscatesoros (velocidad 4)"); 
       Console.WriteLine("Habilidad especial (Robo): Roba 2 de velocidad a un jugador cercano por 1 turno (Enfriamiento 10 turnos)");

       Console.WriteLine("3 Minero (velocidad 3)");
       Console.WriteLine("Habilidad especial (Derrumbe): Destruye maximo 2 trampas que esten cerca y aleja dos casillas a los jugadores cercanos (Enfriamiento 10 turnos)");

       Console.WriteLine("4 ()");
       Console.WriteLine("Habilidad especial()");

       Console.WriteLine("5 ()");
       Console.WriteLine("Habilidad especial()");
       Console.WriteLine("");
       Console.WriteLine("Empleo:");

       int opcion = Program.Validar_int();

       while (opcion < 1 || opcion > 5)
       {
        Console.WriteLine("Opcion incorrecta. Elije una opcion correcta");
        opcion = Program.Validar_int();
       }

       switch (opcion)
       {
            case 1:
                empleo = "Explorador";
                velocidad = 3;
                habilidad_Especial = "Manitas"; //Convierte una trampa o un cofre en bonificaciones (Enfriamiento 2 turnos)
                break;
            case 2:
                empleo = "Buscatesoros";
                velocidad = 4;
                habilidad_Especial = "Robo"; //Roba 2 de velocidad a un jugador cercano por 1 turno (Enfriamiento 10 turnos)
                break;
            case 3:
                empleo = "Minero";
                velocidad = 3;
                habilidad_Especial = "Derrumbe"; //Destruye maximo 2 trampas que esten cerca y aleja dos casillas a los jugadores cercanos (Enfriamiento 10 turnos)
                break;
            case 4:
                empleo = "";
                velocidad = 3;
                habilidad_Especial = "Manitas"; //Convierte una trampa o un cofre en bonificaciones (Enfriamiento 2 turnos)
                break;
            case 5:
                empleo = "";
                velocidad = 3;
                habilidad_Especial = "Manitas"; //Convierte una trampa o un cofre en bonificaciones (Enfriamiento 2 turnos)
            break;                
       }
   }

   public void Dar_habilidades()
   {
     //Habilidades
      Console.WriteLine ("Por ultimo, elige dos habilidades distintas de entre las siguientes ");
      Console.WriteLine("");
      Console.WriteLine ("1 Carrera (Aumenta tu velocidad en 2 este turno)(Enfriamiento 4 turnos)");
      Console.WriteLine ("2 Descanso (Restaura el Enfriamiento de tu otra habilidad)(Enfriamiento 8 turnos)");
      Console.WriteLine ("3 Salto (Te trasladas 2 casillas sin importar si hay trampas)(Enfriamiento 3 turnos)");
      Console.WriteLine ("4 Empuje (Alejas a un jugador cercarno una casilla)(Enfriamiento 3 turnos)");
      Console.WriteLine("");

        int opcion1 = Program.Validar_int();
        int opcion2 = Program.Validar_int();

        while (opcion1 < 1|| opcion1 > 4|| opcion2 < 1|| opcion2 > 4 || opcion1 == opcion2)
        {
            Console.WriteLine("Habilidades incorrectas, elige nuevamente");

            opcion1 = Program.Validar_int();
            opcion2 = Program.Validar_int();
        }

        switch (opcion1)
        {
            case 1:
            habilidad_1 = "Carrera";
            break;

            case 2:
            habilidad_1 = "Descanso";
            break;

            case 3:
            habilidad_1 = "Salto";
            break;

            case 4:
            habilidad_1 = "Empuje";
            break;
        }
        switch (opcion2)
        {
            case 1:
            habilidad_2 = "Carrera";
            break;

            case 2:
            habilidad_2 = "Descanso";
            break;

            case 3:
            habilidad_2 = "Salto";
            break;

            case 4:
            habilidad_2 = "Empuje";
            break;
        }
    }

   public void Info()
   {
    Console.WriteLine($"Nombre: {NOMBRE}");
    Console.WriteLine($"Empleo: {EMPLEO}");
    Console.WriteLine($"Velocidad: {VELOCIDAD.ToString()}");
    Console.WriteLine($"Habilidad 1: {HABILIDAD_1}");
    Console.WriteLine($"Habilidad 2: {HABILIDAD_2}");
    Console.WriteLine($"Habilidad Especial: {HABILIDAD_ESPECIAL}");
   } 
}

class Board
{

  public Board()
  {
    string [][] tablero = new string [30][];
    for (int i = 0; i < 30; i++)
    {
      tablero[i] = new string [152];
    }

    tablero = Inicializar_Tablero(tablero);
    tablero = Caminos(tablero);
    Mostrar_Tablero(tablero);
  }

  public string [][] Inicializar_Tablero(string [][] entrada)
  {
    int fil = 0;
    int col = 0;

    //Muros exteriores
    for( fil = 0; fil < 30; fil++)
    {
      for( col = 0; col < 152; col++)
      {
        entrada[0][col] = "#";
        entrada[29][col] = "#";

        entrada[fil][0] = "#";
        entrada[fil][151] = "#";
      }
    }

    //Muros interiores
    for ( fil = 0; fil < 30; fil++)
    {
      entrada[fil][75] = "#";
      entrada[fil][37] = "#";
      entrada[fil][113]= "#";
    }  
    for( col = 0; col < 152; col ++)
    {
      entrada[14][col] = "#";
    }
    
    return entrada;
  }

  public string [][] Caminos(string [][] entrada)
  {
    int fil = 0;
    int col = 0; 

    Random random = new Random();
    int posibilidad = random.Next(1, 10);
    
    for(fil = 1; fil < 29; fil ++)
    {
      for (col = 1; col < 151; col ++)
      {
        if( entrada [fil][col] == "#" && posibilidad == 7)
        {
          entrada[fil][col] = ".";
        }
        random = new Random();
        posibilidad = random.Next(1,10);
      }
    } 

    //Fila 14
    entrada = Fila_14(entrada); 

    //Constantes
    entrada[14][37] = "#";
    entrada[14][75] = "#";
    entrada[14][113]= "#";

    entrada[10][37] = ".";
    entrada[11][75] = ".";
    entrada[12][113] =".";

    entrada[25][37] = ".";
    entrada[24][75] = ".";
    entrada[28][113] =".";

    return entrada;
  }


  public string [][] Fila_14(string [][] entrada_es)
  {
    Random dado = new Random();
    int cortes = dado.Next(1, 4);
    int puertas = dado.Next(2, 6);
    int i = 0;
    int j = 0;

    for (i = 1; i < 37; i++)
    {
      j = 1;
      entrada_es [14][i] = Cortes(cortes, puertas, i, j);
      puertas = dado.Next(2, 6);
    }

    dado = new Random(); 
    cortes = dado.Next(1, 4);
    puertas = dado.Next(2, 6);
    for (i = 37; i < 75; i++)
    {
      j = 37;
      entrada_es [14][i] = Cortes(cortes, puertas, i, j);
    }

    dado = new Random(); 
    cortes = dado.Next( 1, 4);
    puertas = dado.Next(2, 6);
    for (i = 75; i < 113; i++)
    {
      j = 75;
      entrada_es [14][i] = Cortes(cortes, puertas, i, j);
    }

    dado = new Random(); 
    cortes = dado.Next(1, 4);
    for (i = 113; i < 151; i++)
    {
      j = 113;
      entrada_es [14][i] = Cortes(cortes, puertas, i, j);
      puertas = dado.Next(2, 6);
    }


    return entrada_es;
  }

  public string Cortes(int cortes_es, int puertas_es, int i_es, int j_es)
  {

    if(cortes_es == 1 && i_es > j_es + 14 && i_es <= j_es + 14 + puertas_es)
    {
      return ".";
    }

    else if(cortes_es == 2 && i_es > j_es + 3 && i_es <= j_es + 3 + puertas_es || i_es > j_es + 26 && i_es <= j_es + 26 + puertas_es)
    {
      return ".";
    }   

    else if(cortes_es == 3 && i_es > j_es + 3 && i_es <= j_es + 3 + puertas_es || i_es > j_es + 26 && i_es <= j_es + 26 + puertas_es || i_es > j_es + 14 && i_es <= j_es + 14 + puertas_es)
    {
      return ".";
    }
    else return "#";
  }
  public void Mostrar_Tablero(string [][] entrada)
  {
    int fil = 0;
    int col = 0;

    for(fil = 0; fil < 30; fil++)
    {
      for(col = 0; col < 152; col++)
      {
        if(entrada[fil][col] == "#")
        {
          Console.Write(entrada[fil][col]);
        }
        else
        {
          Console.Write(".");
        }
      }
      Console.WriteLine("");
    }
  }
}